package controlModule;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-13")
public class SystemState implements org.apache.thrift.TBase<SystemState, SystemState._Fields>, java.io.Serializable, Cloneable, Comparable<SystemState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SystemState");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BUFFERSIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("buffersize", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPUTING_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("computingSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField TRANSMISSION_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("transmissionSpeed", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SystemStateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SystemStateTupleSchemeFactory();

  public String name; // required
  public int buffersize; // required
  public double computingSpeed; // required
  public double transmissionSpeed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    BUFFERSIZE((short)2, "buffersize"),
    COMPUTING_SPEED((short)3, "computingSpeed"),
    TRANSMISSION_SPEED((short)4, "transmissionSpeed");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // BUFFERSIZE
          return BUFFERSIZE;
        case 3: // COMPUTING_SPEED
          return COMPUTING_SPEED;
        case 4: // TRANSMISSION_SPEED
          return TRANSMISSION_SPEED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BUFFERSIZE_ISSET_ID = 0;
  private static final int __COMPUTINGSPEED_ISSET_ID = 1;
  private static final int __TRANSMISSIONSPEED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUFFERSIZE, new org.apache.thrift.meta_data.FieldMetaData("buffersize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPUTING_SPEED, new org.apache.thrift.meta_data.FieldMetaData("computingSpeed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRANSMISSION_SPEED, new org.apache.thrift.meta_data.FieldMetaData("transmissionSpeed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SystemState.class, metaDataMap);
  }

  public SystemState() {
  }

  public SystemState(
    String name,
    int buffersize,
    double computingSpeed,
    double transmissionSpeed)
  {
    this();
    this.name = name;
    this.buffersize = buffersize;
    setBuffersizeIsSet(true);
    this.computingSpeed = computingSpeed;
    setComputingSpeedIsSet(true);
    this.transmissionSpeed = transmissionSpeed;
    setTransmissionSpeedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemState(SystemState other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.buffersize = other.buffersize;
    this.computingSpeed = other.computingSpeed;
    this.transmissionSpeed = other.transmissionSpeed;
  }

  public SystemState deepCopy() {
    return new SystemState(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setBuffersizeIsSet(false);
    this.buffersize = 0;
    setComputingSpeedIsSet(false);
    this.computingSpeed = 0.0;
    setTransmissionSpeedIsSet(false);
    this.transmissionSpeed = 0.0;
  }

  public String getName() {
    return this.name;
  }

  public SystemState setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getBuffersize() {
    return this.buffersize;
  }

  public SystemState setBuffersize(int buffersize) {
    this.buffersize = buffersize;
    setBuffersizeIsSet(true);
    return this;
  }

  public void unsetBuffersize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BUFFERSIZE_ISSET_ID);
  }

  /** Returns true if field buffersize is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffersize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BUFFERSIZE_ISSET_ID);
  }

  public void setBuffersizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BUFFERSIZE_ISSET_ID, value);
  }

  public double getComputingSpeed() {
    return this.computingSpeed;
  }

  public SystemState setComputingSpeed(double computingSpeed) {
    this.computingSpeed = computingSpeed;
    setComputingSpeedIsSet(true);
    return this;
  }

  public void unsetComputingSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPUTINGSPEED_ISSET_ID);
  }

  /** Returns true if field computingSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetComputingSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPUTINGSPEED_ISSET_ID);
  }

  public void setComputingSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPUTINGSPEED_ISSET_ID, value);
  }

  public double getTransmissionSpeed() {
    return this.transmissionSpeed;
  }

  public SystemState setTransmissionSpeed(double transmissionSpeed) {
    this.transmissionSpeed = transmissionSpeed;
    setTransmissionSpeedIsSet(true);
    return this;
  }

  public void unsetTransmissionSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRANSMISSIONSPEED_ISSET_ID);
  }

  /** Returns true if field transmissionSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetTransmissionSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRANSMISSIONSPEED_ISSET_ID);
  }

  public void setTransmissionSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRANSMISSIONSPEED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case BUFFERSIZE:
      if (value == null) {
        unsetBuffersize();
      } else {
        setBuffersize((Integer)value);
      }
      break;

    case COMPUTING_SPEED:
      if (value == null) {
        unsetComputingSpeed();
      } else {
        setComputingSpeed((Double)value);
      }
      break;

    case TRANSMISSION_SPEED:
      if (value == null) {
        unsetTransmissionSpeed();
      } else {
        setTransmissionSpeed((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case BUFFERSIZE:
      return getBuffersize();

    case COMPUTING_SPEED:
      return getComputingSpeed();

    case TRANSMISSION_SPEED:
      return getTransmissionSpeed();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case BUFFERSIZE:
      return isSetBuffersize();
    case COMPUTING_SPEED:
      return isSetComputingSpeed();
    case TRANSMISSION_SPEED:
      return isSetTransmissionSpeed();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemState)
      return this.equals((SystemState)that);
    return false;
  }

  public boolean equals(SystemState that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_buffersize = true;
    boolean that_present_buffersize = true;
    if (this_present_buffersize || that_present_buffersize) {
      if (!(this_present_buffersize && that_present_buffersize))
        return false;
      if (this.buffersize != that.buffersize)
        return false;
    }

    boolean this_present_computingSpeed = true;
    boolean that_present_computingSpeed = true;
    if (this_present_computingSpeed || that_present_computingSpeed) {
      if (!(this_present_computingSpeed && that_present_computingSpeed))
        return false;
      if (this.computingSpeed != that.computingSpeed)
        return false;
    }

    boolean this_present_transmissionSpeed = true;
    boolean that_present_transmissionSpeed = true;
    if (this_present_transmissionSpeed || that_present_transmissionSpeed) {
      if (!(this_present_transmissionSpeed && that_present_transmissionSpeed))
        return false;
      if (this.transmissionSpeed != that.transmissionSpeed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + buffersize;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(computingSpeed);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(transmissionSpeed);

    return hashCode;
  }

  @Override
  public int compareTo(SystemState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuffersize()).compareTo(other.isSetBuffersize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffersize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffersize, other.buffersize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComputingSpeed()).compareTo(other.isSetComputingSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComputingSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.computingSpeed, other.computingSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransmissionSpeed()).compareTo(other.isSetTransmissionSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransmissionSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transmissionSpeed, other.transmissionSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SystemState(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buffersize:");
    sb.append(this.buffersize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("computingSpeed:");
    sb.append(this.computingSpeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transmissionSpeed:");
    sb.append(this.transmissionSpeed);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'buffersize' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'computingSpeed' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'transmissionSpeed' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SystemStateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SystemStateStandardScheme getScheme() {
      return new SystemStateStandardScheme();
    }
  }

  private static class SystemStateStandardScheme extends org.apache.thrift.scheme.StandardScheme<SystemState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SystemState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUFFERSIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.buffersize = iprot.readI32();
              struct.setBuffersizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPUTING_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.computingSpeed = iprot.readDouble();
              struct.setComputingSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRANSMISSION_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.transmissionSpeed = iprot.readDouble();
              struct.setTransmissionSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBuffersize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'buffersize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetComputingSpeed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'computingSpeed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTransmissionSpeed()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transmissionSpeed' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SystemState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUFFERSIZE_FIELD_DESC);
      oprot.writeI32(struct.buffersize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPUTING_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.computingSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANSMISSION_SPEED_FIELD_DESC);
      oprot.writeDouble(struct.transmissionSpeed);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SystemStateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SystemStateTupleScheme getScheme() {
      return new SystemStateTupleScheme();
    }
  }

  private static class SystemStateTupleScheme extends org.apache.thrift.scheme.TupleScheme<SystemState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SystemState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.buffersize);
      oprot.writeDouble(struct.computingSpeed);
      oprot.writeDouble(struct.transmissionSpeed);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SystemState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.buffersize = iprot.readI32();
      struct.setBuffersizeIsSet(true);
      struct.computingSpeed = iprot.readDouble();
      struct.setComputingSpeedIsSet(true);
      struct.transmissionSpeed = iprot.readDouble();
      struct.setTransmissionSpeedIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

